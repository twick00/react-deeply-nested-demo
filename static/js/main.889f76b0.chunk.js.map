{"version":3,"sources":["components/sub-components/CellComponent.js","components/sub-components/RowComponent.js","components/NestedListComponent.js","components/HomeComponent.js","components/ADecoratorOfSomeKindComponent.js","App.js","serviceWorker.js","index.js"],"names":["CellComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","updateData","id","path","target","value","nextProps","nextState","nextContext","react_default","a","createElement","index_es","defaultValue","style","color","onChange","Component","RowComponent","state","Math","random","toString","_this2","key","uniqueId","data","name","entries","map","keyValPair","idx","Array","isArray","anotherValue","concat","sub_components_CellComponent","NestedListComponent","console","log","set","setState","exampleData","Fragment","sub_components_RowComponent","type","ppu","batters","batter","topping","HomeComponent","ADecoratorOfSomeKindComponent","goTo","history","push","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","role","Typography_default","variant","Button_default","onClick","withRouter","App","BrowserRouter","className","Route","component","Switch","exact","Redirect","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.889f76b0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Input} from \"@material-ui/core\"\n\nclass CellComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false\n  }\n\n  handleChange = (e) => {\n    this.props.updateData(this.props.id, this.props.path, e.target.value)\n  };\n\n  render() {\n    return (\n        <Input defaultValue={this.props.value} style={{color: this.props.style}} onChange={this.handleChange}/>\n    );\n  }\n}\n\nexport default CellComponent;","import React, {Component} from 'react';\nimport CellComponent from \"./CellComponent\";\nimport {uniqueId} from \"lodash\"\n\nclass RowComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state =\n        {color: \"#\"+((1<<24)*Math.random()|0).toString(16), id: props.id}\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false\n  }\n\n  render() {\n    return (\n      <div key={uniqueId()}>\n        <h1>{this.props.data.name}</h1>\n        {Object.entries(this.props.data).map((keyValPair, idx) => {\n          let value = this.props.data[keyValPair[0]];\n          let path = this.props.path || \"\";\n          // let path = this.props.path || [];\n          if(typeof value === \"object\" && !Array.isArray(value)) {\n            //IF ITS AN OBJECT (AND NOT AN ARRAY)\n            return (\n              <div key={uniqueId()}>\n                <h2 key={uniqueId()}>New Row!</h2>\n                <RowComponent id={this.state.id} key={uniqueId()} data={value} path={path.concat(`.${keyValPair[0]}`)} updateData={this.props.updateData}/>\n              </div>\n            )\n          } else if(Array.isArray(value)) {\n            //IF ITS AN ARRAY\n            return value.map((anotherValue, idx) => {\n              return (\n                <div key={uniqueId()}>\n                  <h2 key={uniqueId()}>I'm an Array!</h2>\n                  <RowComponent id={this.state.id} key={uniqueId()} data={anotherValue} path={path.concat(`.${keyValPair[0]}[${idx}]`)} updateData={this.props.updateData}/>\n                </div>\n              )})\n          } else {\n            //ANYTHING ELSE CAN/WILL BE RENDERED\n            return <CellComponent id={this.state.id} style={this.state.color} key={uniqueId()} value={value}\n                                  path={path.concat(`.${keyValPair[0]}`)} updateData={this.props.updateData}/>\n          }\n        })}\n      </div>\n    );\n  }\n}\n\nexport default RowComponent;","import React, {Component} from 'react';\nimport RowComponent from \"./sub-components/RowComponent\";\nimport {set, uniqueId} from \"lodash\"\n\n\nclass NestedListComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {data:exampleData} || {};\n  }\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false\n  }\n\n  updateData = (id, path, data) => {\n    console.log(\"ID:\"+id ? id : \"Empty\");\n    console.log(\"PATH:\"+path ? path : \"Empty\");\n    console.log(\"DATA:\"+data ? data : \"Empty\");\n    let state = this.state;\n    set(state.data, path, data)\n    this.setState(state)\n  };\n\n  render() {\n    return (\n        <>\n          {this.state.data.map((data, idx) =>\n            <RowComponent key={uniqueId()} id={data.id} data={data} path={`[${idx}]`} updateData={this.updateData}/>\n            )}\n        </>\n    );\n  }\n}\n\nexport default NestedListComponent;\n\nconst exampleData =\n[\n  {\n    \"id\": \"0001\",\n    \"type\": \"donut\",\n    \"name\": \"Cake\",\n    \"ppu\": 0.55,\n    \"batters\":\n        {\n          \"batter\":\n              [\n                { \"id\": \"1001\", \"type\": \"Regular\" },\n                { \"id\": \"1002\", \"type\": \"Chocolate\" },\n                { \"id\": \"1003\", \"type\": \"Blueberry\" },\n                { \"id\": \"1004\", \"type\": \"Devil's Food\" }\n              ]\n        },\n    \"topping\":\n        [\n          { \"id\": \"5001\", \"type\": \"None\" },\n          { \"id\": \"5002\", \"type\": \"Glazed\" },\n          { \"id\": \"5005\", \"type\": \"Sugar\" },\n          { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\n          { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n          { \"id\": \"5003\", \"type\": \"Chocolate\" },\n          { \"id\": \"5004\", \"type\": \"Maple\" }\n        ]\n  },\n  {\n    \"id\": \"0002\",\n    \"type\": \"donut\",\n    \"name\": \"Raised\",\n    \"ppu\": 0.55,\n    \"batters\":\n        {\n          \"batter\":\n              [\n                { \"id\": \"1001\", \"type\": \"Regular\" }\n              ]\n        },\n    \"topping\":\n        [\n          { \"id\": \"5001\", \"type\": \"None\" },\n          { \"id\": \"5002\", \"type\": \"Glazed\" },\n          { \"id\": \"5005\", \"type\": \"Sugar\" },\n          { \"id\": \"5003\", \"type\": \"Chocolate\" },\n          { \"id\": \"5004\", \"type\": \"Maple\" }\n        ]\n  },\n  {\n    \"id\": \"0003\",\n    \"type\": \"donut\",\n    \"name\": \"Old Fashioned\",\n    \"ppu\": 0.55,\n    \"batters\":\n        {\n          \"batter\":\n              [\n                { \"id\": \"1001\", \"type\": \"Regular\" },\n                { \"id\": \"1002\", \"type\": \"Chocolate\" }\n              ]\n        },\n    \"topping\":\n        [\n          { \"id\": \"5001\", \"type\": \"None\" },\n          { \"id\": \"5002\", \"type\": \"Glazed\" },\n          { \"id\": \"5003\", \"type\": \"Chocolate\" },\n          { \"id\": \"5004\", \"type\": \"Maple\" }\n        ]\n  }\n]","import React, {Component} from 'react';\n\nclass HomeComponent extends Component {\n  render() {\n    return (\n        <div>\n          <h1>YOU'RE HOME</h1>\n        </div>\n    );\n  }\n}\n\nexport default HomeComponent;","import React, {Component} from 'react';\nimport {AppBar, Toolbar, IconButton, Typography, Button} from \"../imports\";\nimport {Route,withRouter} from \"react-router-dom\";\n\nclass ADecoratorOfSomeKindComponent extends Component {\n\n  goTo = (path) => {\n    this.props.history.push(path)\n  }\n  render() {\n    return (\n        <div>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton color=\"inherit\" aria-label=\"Menu\">\n                <span role=\"img\" aria-label=\"Just a smiley\">😀</span>\n              </IconButton>\n              <Typography variant=\"h5\" color=\"inherit\">\n                Carl Hates React\n              </Typography>\n                    <Button onClick={() => this.goTo(\"/list\")} color=\"inherit\">List</Button>\n                    <Button onClick={() => this.goTo(\"/\")} color=\"inherit\">Home</Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(ADecoratorOfSomeKindComponent);","import React, {Component} from 'react';\nimport './App.css';\nimport NestedListComponent from \"./components/NestedListComponent\";\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport HomeComponent from \"./components/HomeComponent\";\nimport ADecoratorOfSomeKindComponent\n  from \"./components/ADecoratorOfSomeKindComponent\";\n\nclass App extends Component {\n  render() {\n    return (\n        <>\n          <BrowserRouter>\n            <div className=\"App\">\n              <Route component={ADecoratorOfSomeKindComponent}/>\n              <Switch>\n                <Route exact path={\"/\"} component={HomeComponent}/>\n                <Route path={\"/list\"} component={NestedListComponent}/>\n                <Redirect to={\"/\"}/>\n              </Switch>\n            </div>\n          </BrowserRouter>\n        </>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}